steps:
- pwsh: |
      New-Item -ItemType Directory -Path "TestCases"
      cd TestCases

      New-Item -ItemType Directory -Path "SourceFiles"
      cd SourceFiles
      New-Item -Name "sample_1.c" -ItemType "file"
      New-Item -Name "sample_2.c" -ItemType "file"
      New-Item -Name "sample_3.cpp" -ItemType "file"
      New-Item -Name "sample_4.cpp" -ItemType "file"

      cd ..

      New-Item -ItemType Directory -Path "HeaderFiles"
      cd HeaderFiles
      New-Item -Name "sample_1.h" -ItemType "file"
      New-Item -Name "sample_2.h" -ItemType "file"
      New-Item -Name "sample_3.hpp" -ItemType "file"
      New-Item -Name "sample_4.hpp" -ItemType "file"
  displayName: 'Generate files for artifacts'

- task: PublishBuildArtifacts@1
  displayName: 'Publish source files'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/TestCases/SourceFiles'
    ArtifactName: 'Artifact_SourceFiles'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: 'Publish header files'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/TestCases/HeaderFiles'
    ArtifactName: 'Artifact_HeaderFiles'
    publishLocation: 'Container'

# Test case #1
# Download all files from Artifact_SourceFiles to $(System.ArtifactsDirectory)/TestCases/1_OnlySourceFiles/
# The download folder should contain only *.c and *.cpp files
- task: DownloadBuildArtifacts@0
  displayName: 'Download only source files'
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'Artifact_SourceFiles'
    downloadPath: '$(System.ArtifactsDirectory)/TestCases/1_OnlySourceFiles/'

# Test case #2
# Download all files from Artifact_SourceFiles to $(System.ArtifactsDirectory)/TestCases/2_OnlyHeaderFiles/
# The download folder should contain only *.h and *.hpp files
- task: DownloadBuildArtifacts@0
  displayName: 'Download only header files'
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'Artifact_HeaderFiles'
    downloadPath: '$(System.ArtifactsDirectory)/TestCases/2_OnlyHeaderFiles/'

# Test case #3
# Download all *.c files from Artifact_SourceFiles to $(System.ArtifactsDirectory)/TestCases/3_OnlyCFiles/
# The download folder should contain only *.c files
- task: DownloadBuildArtifacts@0
  displayName: 'Download only *.c files'
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'Artifact_SourceFiles'
    itemPattern: 'Artifact_SourceFiles/*.c'
    downloadPath: '$(System.ArtifactsDirectory)/TestCases/3_OnlyCFiles/'

# Test case #4
# Download all *.hpp files from Artifact_HeaderFiles to $(System.ArtifactsDirectory)/TestCases/4_OnlyHPPFiles/
# The download folder should contain only *.hpp files
- task: DownloadBuildArtifacts@0
  displayName: 'Download only *.hpp files'
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'Artifact_HeaderFiles'
    itemPattern: 'Artifact_HeaderFiles/*.hpp'
    downloadPath: '$(System.ArtifactsDirectory)/TestCases/4_OnlyHPPFiles/'

# Test case #5
# Download all *.cpp and *.hpp files from Artifact_SourceFiles and Artifact_HeaderFiles to $(System.ArtifactsDirectory)/TestCases/5_CppFiles/
# The download folder should contain only *.cpp and *.hpp files
- task: DownloadBuildArtifacts@0
  displayName: 'Download *.cpp and *.hpp files'
  inputs:
    buildType: 'current'
    downloadType: 'specific'
    itemPattern: |
      Artifact_SourceFiles/*.cpp
      Artifact_HeaderFiles/*.hpp
    downloadPath: '$(System.ArtifactsDirectory)/TestCases/5_CppFiles/'

# Test case #6
# Download all *.c and *.h files from Artifact_SourceFiles and Artifact_HeaderFiles to $(System.ArtifactsDirectory)/TestCases/6_CFiles/
# The download folder should contain only *.c and *.h files
- task: DownloadBuildArtifacts@0
  displayName: 'Download *.c and *.h files'
  inputs:
    buildType: 'current'
    downloadType: 'specific'
    itemPattern: |
      Artifact_SourceFiles/*.c
      Artifact_HeaderFiles/*.h
    downloadPath: '$(System.ArtifactsDirectory)/TestCases/6_CFiles/'

# Test case #7
# Download all files from Artifact_SourceFiles and Artifact_HeaderFiles to $(System.ArtifactsDirectory)/TestCases/7_AllFiles/
# The download folder should contain all files from Artifact_SourceFiles and Artifact_HeaderFiles
- task: DownloadBuildArtifacts@0
  displayName: 'Download all files'
  inputs:
    buildType: 'current'
    downloadType: 'specific'
    itemPattern: '**'
    downloadPath: '$(System.ArtifactsDirectory)/TestCases/7_AllFiles/'
  
- pwsh: |
      ##############
      ## Global variables
      ##############
      $pathToGeneratedArtifact = "$(Build.SourcesDirectory)";
      $pathToDownloadedArtifact = "$(System.ArtifactsDirectory)";

      ##############
      ## Functions
      ##############
      function compareFolders ($folderReference, $folderDifferenc){
          $FolderReferenceContents = Get-ChildItem $folderReference -Recurse | where-object {-not $_.PSIsContainer}
          $FolderDifferenceContents = Get-ChildItem $folderDifference -Recurse | where-object {-not $_.PSIsContainer}

          return $CheckResult = Compare-Object -ReferenceObject $FolderReferenceContents -DifferenceObject $FolderDifferenceContents -Property ('Name', 'Length');
      }

      ##############
      ## Test Case 1
      ##############
      $TestCaseName = "Test Case 1 (OnlySourceFiles)"
      echo "Check relesut of $TestCaseName" 

      $folderReference = -join($pathToGeneratedArtifact, "TestCases\SourceFiles"); 
      $folderDifference = -join($pathToDownloadedArtifact, "TestCases\1_OnlySourceFiles\Artifact_SourceFiles");
      $CheckResult = compareFolders -folderReference $folderReference -folderDifference $folderDifference 

      if ($CheckResult) {
          echo "$TestCaseName - failed"
      } else {
          echo "$TestCaseName - passed"
      }

      ##############
      ## Test Case 2
      ##############
      $TestCaseName = "Test Case 2 (OnlyHeaderFiles)"
      echo "Check relesut of $TestCaseName" 

      $folderReference = -join($pathToGeneratedArtifact, "TestCases\HeaderFiles");
      $folderDifference =  -join($pathToDownloadedArtifact, "TestCases\2_OnlyHeaderFiles\Artifact_HeaderFiles");

      $CheckResult = compareFolders -folderReference $folderReference -folderDifference $folderDifference 
      if ($CheckResult) {
          echo "$TestCaseName - failed"
      } else {
          echo "$TestCaseName - passed"
      }

      ##############
      ## Test Case 3
      ##############
      $TestCaseName = "Test Case 3 (OnlyCFiles)"
      $CheckResult = $null;
      echo "Check relesut of $TestCaseName" 

      $folder = -join($pathToDownloadedArtifact, "TestCases\3_OnlyCFiles");

      $files = Get-ChildItem $folder -Recurse | where-object {-not $_.PSIsContainer} 

      foreach ($file in $files){
          $extension = [IO.Path]::GetExtension($file)
          if ($extension -ne ".c") {
            $CheckResult = "Error";
          }
      }

      if ($CheckResult) {
          echo "$TestCaseName - failed"
      } else {
          echo "$TestCaseName - passed"
      }

      ##############
      ## Test Case 4
      ##############
      $TestCaseName = "Test Case 4 (OnlyHPPFiles)"
      $CheckResult = $null;
      echo "Check relesut of $TestCaseName" 

      $folder = -join($pathToDownloadedArtifact, "TestCases\4_OnlyHPPFiles");

      $files = Get-ChildItem $folder -Recurse | where-object {-not $_.PSIsContainer} 

      foreach ($file in $files){
          $extension = [IO.Path]::GetExtension($file)
          if ($extension -ne ".hpp") {
            $CheckResult = "Error";
          }
      }

      if ($CheckResult) {
          echo "$TestCaseName - failed"
      } else {
          echo "$TestCaseName - passed"
      }

      ##############
      ## Test Case 5
      ##############
      $TestCaseName = "Test Case 5 (CppFiles)"
      $CheckResult = $null;
      echo "Check relesut of $TestCaseName" 

      $folder = -join($pathToDownloadedArtifact, "TestCases\5_CppFiles");

      $files = Get-ChildItem $folder -Recurse | where-object {-not $_.PSIsContainer} 

      foreach ($file in $files){
          $extension = [IO.Path]::GetExtension($file)
          if ($extension -eq ".cpp" -or $extension -eq ".hpp") {
            continue;
          } else {
            $CheckResult = "Error";
          }
      }

      if ($CheckResult) {
          echo "$TestCaseName - failed"
      } else {
          echo "$TestCaseName - passed"
      }


      ##############
      ## Test Case 6
      ##############
      $TestCaseName = "Test Case 6 (CFiles)"
      $CheckResult = $null;
      echo "Check relesut of $TestCaseName" 

      $folder = -join($pathToDownloadedArtifact, "TestCases\6_CFiles");
      $files = Get-ChildItem $folder -Recurse | where-object {-not $_.PSIsContainer} 

      foreach ($file in $files){
          $extension = [IO.Path]::GetExtension($file)
          if ($extension -eq ".c" -or $extension -eq ".h") {
            continue;
          } else {
            $CheckResult = "Error";
          }
      }

      if ($CheckResult) {
          echo "$TestCaseName - failed"
      } else {
          echo "$TestCaseName - passed"
      }

      ##############
      ## Test Case 7
      ##############
      $TestCaseName = "Test Case 7 (AllFiles)"
      echo "Check relesut of $TestCaseName" 

      $folderReference = -join($pathToGeneratedArtifact, "TestCases\");
      $folderDifference =  -join($pathToDownloadedArtifact, "TestCases\7_AllFiles\");

      $CheckResult = $CheckResult = compareFolders -folderReference $folderReference -folderDifference $folderDifference
      if ($CheckResult) {
          echo "$TestCaseName - failed"
      } else {
          echo "$TestCaseName - passed"
      }
  displayName: 'Verify test results'